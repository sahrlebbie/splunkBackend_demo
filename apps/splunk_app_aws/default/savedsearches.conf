
###### Upgrade

[App Upgrader]
enableSched = 0
schedule_window = 30
description = Upgrade everything of the App to the latest version
alert.digest_mode = True
dispatch.earliest_time = 0
dispatch.latest_time = now
alert.suppress = 0
alert.track = 0
cron_schedule = 0 */4 * * *
search = | upgrade

###### Tags Generator

[AWS Config - Tags]
alert.suppress = 0
alert.track = 0
description = Extract tags lookup from AWS Config
cron_schedule = 5 1 * * *
schedule_window = 30
dispatch.earliest_time = 1
dispatch.latest_time = now
search = `aws-config-sourcetype` | spath output=tags path=tags | stats count by tags resourceType aws_account_id | fields - count | rex max_match=20 field=tags "\"(?<key>[^,]+)\": \"(?<value>[^,]+)\"" | eval keyvalue=mvzip('key', 'value',"=") | mvexpand keyvalue | fields keyvalue resourceType aws_account_id | rex field=keyvalue "(?<key>[^,]+)=(?<value>[^,]+)" |  stats count by key value resourceType aws_account_id | fields key value resourceType aws_account_id | rename resourceType as type | outputlookup tags_config

[AWS Description - Tags]
alert.suppress = 0
alert.track = 0
dispatch.earliest_time = -7d@d
cron_schedule = 10 1 * * *
schedule_window = 30
dispatch.latest_time = now
search = `aws-description-sourcetype` | spath output=tags path=tags | stats count by tags source aws_account_id | fields - count | rex max_match=20 field=tags "\"(?<key>[^,]+)\": \"(?<value>[^,]+)\"" | eval keyvalue=mvzip('key', 'value',"=") | mvexpand keyvalue | fields keyvalue source aws_account_id | rex field=keyvalue "(?<key>[^,]+)=(?<value>[^,]+)" | rex field=source ".*?:(?<type>.*)" |  stats count by key value type aws_account_id | fields key value type aws_account_id | outputlookup tags_description

[AWS Billing - Account Name]
alert.suppress = 0
alert.track = 0
description = Extract account id - account name lookup from monthly billing report
cron_schedule = 0 1 * * *
schedule_window = 30
dispatch.earliest_time = 0
dispatch.latest_time = now
search = `aws-billing-sourcetype` eventtype=aws_billing_monthly_report (RecordType=InvoiceTotal OR RecordType=AccountTotal) | eval LinkedAccountId=if(isnull(LinkedAccountId),PayerAccountId,LinkedAccountId) | eval LinkedAccountName=if(isnull(LinkedAccountName),PayerAccountName,LinkedAccountName) | stats count by LinkedAccountId LinkedAccountName | dedup LinkedAccountId sortby -_time | append [makeresults | eval LinkedAccountId="placeholder" | eval LinkedAccountName="placeholder"] | table LinkedAccountId LinkedAccountName | outputlookup account_name


##### CloudTrail Searches

[CloudTrail EventName Generator]
action.email.inline = 1
alert.digest_mode = True
alert.severity = 1
alert.suppress = 0
alert.track = 0
alert.expires = 2h
cron_schedule = */20 * * * *
dispatch.earliest_time = -22m@m
dispatch.latest_time = -2m@m
enableSched = 0
search = `aws-cloudtrail-sourcetype` | stats count by eventName | lookup all_eventName eventName OUTPUTNEW eventName as existing | fillnull | search existing=0 | fields eventName | outputlookup all_eventName append=true

[CloudTrail Base Search]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
dispatch.earliest_time = -1mon
dispatch.latest_time = now
search = `aws-cloudtrail((aws_account_id="*"),  (region="**") )`       | lookup unauthorized_errorCode errorCode OUTPUT Unauthorized              | stats count count(eval(errorCode!="success")) as errors count(Unauthorized) as Unauthorized by eventName region aws_account_id userName

[CloudTrail Timechart Search]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
dispatch.earliest_time = -1mon
dispatch.latest_time = now
search = `aws-cloudtrail((aws_account_id="*"),  (region="**") )` | eval day=strftime(_time, "%Y-%m-%d %z") | stats count by eventName region aws_account_id day errorCode | eval _time=strptime(day, "%Y-%m-%d %z") | eval response=if(errorCode=="success","success", "error") | lookup unauthorized_errorCode errorCode OUTPUT Unauthorized | eval response=if(Unauthorized=="true", "unauthorized", response) | fields - day errorCode Unauthorized

[CloudTrail S3 Data Event Search]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
auto_summarize = 1
auto_summarize.dispatch.earliest_time = -1mon@d
dispatch.earliest_time = -1mon
dispatch.latest_time = now
search = `aws-cloudtrail-sourcetype`| lookup all_eventName eventName OUTPUTNEW function| search function="S3 Data Event" | spath output=bucketName path="requestParameters.bucketName" | spath output=objectName path=requestParameters.key | spath output=userName path=userIdentity.userName | eval error=if(errorCode=="success",0, 1) | lookup unauthorized_errorCode errorCode OUTPUT Unauthorized | eval Unauthorized=if(Unauthorized=="true", 1, 0) | stats count by region, aws_account_id, bucketName, objectName, userName, eventName, userAgent, sourceIPAddress,Unauthorized, error, readOnly,_time


##### CloudTrail Alerts

[CloudTrail Alert: Unauthorized Actions]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` errorcode [| inputlookup unauthorized_errorCode | return 300 errorCode] | stats count by awsRegion errorCode eventName eventTime userIdentity.arn

[CloudTrail Alert: Instances: Reboot/Stop/Terminate Actions]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=StopInstances OR eventName=RebootInstances OR eventName=TerminateInstances NOT errorCode   | rename "requestParameters.instancesSet.items{}.instanceId" AS instanceId |  stats values(instanceId) as instanceId count(instanceId) as count by awsRegion eventName eventTime userIdentity.arn eventID

[CloudTrail Alert: Instances: Run/Start Actions]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=StartInstances OR eventName=RunInstances NOT errorCode | rename "responseElements.instancesSet.items{}.instanceId" AS instanceId |  stats values(instanceId) as instanceId count(instanceId) as count by awsRegion eventName eventTime userIdentity.arn eventID

[CloudTrail Alert: Security Groups: Create/Delete Groups]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=DeleteSecurityGroup OR eventName=CreateSecurityGroup  NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | foreach responseElements.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn groupId eventID

[CloudTrail Alert: IAM: Create/Delete Roles]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=CreateRole OR eventName=DeleteRole eventSource="iam.amazonaws.com" NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | foreach responseElements.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn roleName eventID

[CloudTrail Alert: IAM: Create/Delete/Update Users]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=DeleteUser OR eventName=CreateUser OR eventName=UpdateUser  eventSource="iam.amazonaws.com" NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | foreach responseElements.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn userName eventID

[CloudTrail Alert: IAM: Create/Delete/Update Groups]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=CreateAccessKey OR eventName=DeleteAccessKey OR eventName=UpdateAccessKey eventSource="iam.amazonaws.com" NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn accessKeyId userName eventID

[CloudTrail Alert: IAM: Group Membership Updates]
disabled = 1
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=AddUserToGroup OR eventName=RemoveUserFromGroup NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | foreach responseElements.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn groupName userName eventID

[CloudTrail Alert: IAM: Create/Delete/Update Access Keys]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=CreateAccessKey OR eventName=DeleteAccessKey OR eventName=UpdateAccessKey NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn userName eventID

[CloudTrail Alert: Key Pairs: Create/Delete/Import Key Pairs]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=CreateKeyPair OR eventName=ImportKeyPair OR eventName=DeleteKeyPair NOT errorCode | foreach requestParameters.* [eval <<MATCHSTR>>='<<FIELD>>'] | stats count by awsRegion eventName eventTime userIdentity.arn keyName eventID

[CloudTrail Alert: VPC: Create/Delete VPC]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=CreateVpc  OR eventName=DeleteVpc  NOT errorCode   | rename requestParameters.vpcId as vpcId  responseElements.vpc.vpcId as temp | eval vpcId=coalesce(temp,vpclId) | stats count by awsRegion eventName eventTime userIdentity.arn vpcId eventID

[CloudTrail Alert: VPC: Create/Delete/Replace Network ACLs]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=CreateNetworkAcl  OR eventName=DeleteNetworkAcl OR eventName=ReplaceNetworkAclEntry NOT errorCode | rename requestParameters.networkAclId as networkAclId  responseElements.networkAcl.networkAclId as temp | eval networkAclId=coalesce(temp, networkAclId) | stats count by awsRegion eventName eventTime userIdentity.arn networkAclId eventID

[CloudTrail Alert: VPC: Create/Delete/Attach Network Interfaces]
disabled = 1
alert.expires = 2h
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-cloudtrail-sourcetype` eventName=DeleteNetworkInterface OR eventName=CreateNetworkInterface OR eventName=AttachNetworkInterface NOT errorCode  | stats count by awsRegion eventName eventTime userIdentity.arn eventID

[Billing Alert: Account Total Cost]
disabled = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 18 * * *
dispatch.earliest_time = @mon
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-cloudwatch-billing((LinkedAccountId="*"),"*")` | stats latest(Sum) as sum by metric_dimensions | stats sum(sum) as sum | search sum > 99999999

[Billing Alert: Subaccount Total Cost]
disabled = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 18 * * *
dispatch.earliest_time = @mon
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-cloudwatch-billing((LinkedAccountId="000000000000"),"*")` | stats latest(Sum) as sum by metric_dimensions | stats sum(sum) as sum | search sum > 99999999

[Billing Alert: Service Total Cost]
disabled = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 18 * * *
dispatch.earliest_time = @mon
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-cloudwatch-billing((LinkedAccountId="*"),"*")` | search "ServiceName=[AmazonEC2]" | stats latest(Sum) as sum by metric_dimensions | stats sum(sum) as sum | search sum > 99999999

[Billing Alert: Subaccount Service Total Cost]
disabled = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 18 * * *
dispatch.earliest_time = @mon
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-cloudwatch-billing((LinkedAccountId="000000000000"),"*")` | search "ServiceName=[AmazonEC2]" | stats latest(Sum) as sum by metric_dimensions | stats sum(sum) as sum | search sum > 99999999

[Config Rules Alert: New Non-Compliant Resource]
action.email.reportServerEnabled = 0
action.email.useNSSubject = 1
alert.expires = 2h
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 0 * * *
disabled = 1
dispatch.earliest_time = -1d
dispatch.latest_time = now
display.general.type = statistics
display.visualizations.charting.chart = line
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = splunk_app_aws
request.ui_dispatch_view = search
search = `aws-config-rule((aws_account_id="*"),  (region="**") , ":complianceDetail")`        ComplianceType="NON_COMPLIANT" EvaluationResultIdentifier.EvaluationResultQualifier.ConfigRuleName="*"



###### Topology

[Config: Topology Daily Snapshot Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 0 1 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 0
search = `topology-history-index` [search `topology-daily-snapshot-index` earliest=-1d@d | stats count | eval earliest=if(count==0, 0, "-1d@d") | return earliest] latest=@d | append [search `topology-daily-snapshot-index` earliest=-1d@d] | dedup resourceId | search resourceStatus!="ResourceDeleted" | eval _time=relative_time(now(),"@d") | table resourceArn, relationships, tags, resourceStatus, instanceStatus, instanceType, publicIp, privateIp, vpcId , resourceId, resourceName, awsAccountId, awsRegion, resourceType, attachedPolicies, userPolicies, groupPolicies, _time | collect index=aws_topology_daily_snapshot source=aws_topology_summary

[Config: Topology Monthly Snapshot Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 0 0 1 * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 0
search=`topology-daily-snapshot-index` earliest=-1d@d | table resourceArn, relationships, tags, resourceStatus, instanceStatus, instanceType, publicIp, privateIp, vpcId , resourceId, resourceName, awsAccountId, awsRegion, resourceType, attachedPolicies, userPolicies, groupPolicies, _time | collect index=aws_topology_monthly_snapshot source=aws_topology_summary


[Config: Topology History Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
dispatch.earliest_time = 0
dispatch.latest_time = now
search=`aws-config-sourcetype` (resourceId=igw-* OR resourceId=vpc-* OR resourceId=i-* OR resourceId=subnet-* OR resourceId=vol-* OR resourceId=sg-* OR resourceId=eni-* OR resourceId=acl-* OR resourceId=rtb-* OR resourceType=AWS::ElasticLoadBalancingV2::LoadBalancer OR resourceType=AWS::IAM::*) | dedup resourceId | search configurationItemStatus!="ResourceDeleted" | eval resourceName=if((isnull(resourceName) or resourceName==""), 'tags.Name', resourceName), resourceName=if((isnull(resourceName) or resourceName==""), 'configuration.groupName', resourceName), resourceName=if((isnull(resourceName) or resourceName==""), resourceId, resourceName) | eval _time=_indextime, relationships=mvzip('relationships{}.resourceId', 'relationships{}.name'), tags=mvzip('configuration.tags{}.key', 'configuration.tags{}.value'), attachedPolicies=mvzip('configuration.attachedManagedPolicies{}.policyArn', 'configuration.attachedManagedPolicies{}.policyName'), userPolicies=mvzip('configuration.userPolicyList{}.policyName', 'configuration.userPolicyList{}.policyDocument'), groupPolicies=mvzip('configuration.groupPolicyList{}.policyName', 'configuration.groupPolicyList{}.policyDocument') | eval relationships=mvfilter(match(relationships, ",Is*") AND NOT match(relationships, ",Is attached to Volume"))  | rename configurationItemStatus as resourceStatus, configuration.state.name as instanceStatus, configuration.instanceType as instanceType, configuration.vpcId as vpcId, ARN as resourceArn, configuration.privateIpAddress as privateIp, configuration.publicIpAddress as publicIp | table resourceArn, relationships, tags, resourceStatus, instanceStatus, instanceType, publicIp, privateIp, vpcId , resourceId, resourceName, awsAccountId, awsRegion, resourceType, attachedPolicies, userPolicies, groupPolicies, configurationItemCaptureTime, _time | collect index=aws_topology_history source=aws_topology_summary | append [| makeresults count=1 | eval earliestTimestamp=floor(now()/3600)*3600 | table earliestTimestamp | outputlookup topology_history_checkpoint]


[Config: Topology History Appender]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 5 * * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 0
search=`aws-config-sourcetype` (resourceId=igw-* OR resourceId=vpc-* OR resourceId=i-* OR resourceId=subnet-* OR resourceId=vol-* OR resourceId=sg-* OR resourceId=eni-* OR resourceId=acl-* OR resourceId=rtb-* OR resourceType=AWS::ElasticLoadBalancingV2::LoadBalancer OR resourceType=AWS::IAM::*) [| inputlookup topology_history_checkpoint | rename earliestTimestamp as _index_earliest | return _index_earliest] | dedup resourceId | eval resourceName=if((isnull(resourceName) or resourceName==""), 'tags.Name', resourceName), resourceName=if((isnull(resourceName) or resourceName==""), 'configuration.groupName', resourceName), resourceName=if((isnull(resourceName) or resourceName==""), resourceId, resourceName) | eval _time=_indextime, relationships=mvzip('relationships{}.resourceId', 'relationships{}.name'), tags=mvzip('configuration.tags{}.key', 'configuration.tags{}.value'), attachedPolicies=mvzip('configuration.attachedManagedPolicies{}.policyArn', 'configuration.attachedManagedPolicies{}.policyName'), userPolicies=mvzip('configuration.userPolicyList{}.policyName', 'configuration.userPolicyList{}.policyDocument'), groupPolicies=mvzip('configuration.groupPolicyList{}.policyName', 'configuration.groupPolicyList{}.policyDocument') | eval relationships=mvfilter(match(relationships, ",Is*") AND NOT match(relationships, ",Is attached to Volume"))  | rename configurationItemStatus as resourceStatus, configuration.state.name as instanceStatus, configuration.instanceType as instanceType, configuration.vpcId as vpcId, ARN as resourceArn, configuration.privateIpAddress as privateIp, configuration.publicIpAddress as publicIp | table resourceArn, relationships, tags, resourceStatus, instanceStatus, instanceType, publicIp, privateIp, vpcId , resourceId, resourceName, awsAccountId, awsRegion, resourceType, attachedPolicies, userPolicies, groupPolicies, configurationItemCaptureTime, _time | collect index=aws_topology_history source=aws_topology_summary | append [| makeresults count=1 | eval earliestTimestamp=floor(now()/3600)*3600 | table earliestTimestamp | outputlookup topology_history_checkpoint]


[Config: Topology Playback Appender]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 0 1 * * *
dispatch.earliest_time = 0
dispatch.latest_time = now
enableSched = 0
search=`topology-history-index` configurationItemCaptureTime=* (resourceId=igw-* OR resourceId=vpc-* OR resourceId=i-* OR resourceId=subnet-* OR resourceId=vol-* OR resourceId=sg-* OR resourceId=eni-* OR resourceId=acl-* OR resourceId=rtb-*) [| inputlookup topology_playback_checkpoint | rename earliestTimestamp as earliest | return earliest]| eval indexTimestamp=floor(_time), _time=strptime(configurationItemCaptureTime, "%Y-%m-%dT%H:%M:%S.%3NZ"), timestamp=floor(_time/60)*60, canMiss=if((indexTimestamp - timestamp) > 86400, 1, 0) | table relationships, resourceStatus, instanceStatus, vpcId , resourceId, resourceName, awsAccountId, awsRegion, resourceType, canMiss, timestamp, _time | collect index=aws_topology_playback source=aws_topology_summary | append [| makeresults count=1 | eval earliestTimestamp=floor(now()/3600)*3600 | table earliestTimestamp | outputlookup topology_playback_checkpoint]


[CloudWatch: Topology CPU Metric Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 10 * * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
search = `aws-cloudwatch-ec2("*", "*")` metric_dimensions="*InstanceId=[*]*" metric_name="CPUUtilization" \
         | stats avg(Average) as cpu by metric_dimensions | `aws-cloudwatch-dimension-rex("InstanceId", "name")` \
         | table cpu, name | outputlookup topology_cpu_metrics

[CloudWatch: Topology Disk IO Metric Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 15 * * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
search = `aws-cloudwatch-ec2("*", "*")` metric_dimensions="*InstanceId=[*]*" metric_name="Disk*Ops" \
         | stats sum(Sum) as io_count by metric_dimensions, metric_name | stats sum(io_count) as disk by metric_dimensions \
         | `aws-cloudwatch-dimension-rex("InstanceId", "name")` | table disk, name | outputlookup topology_diskio_metrics

[CloudWatch: Topology Network Traffic Metric Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 20 * * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
search = `aws-cloudwatch-ec2("*", "*")` metric_dimensions="*InstanceId=[*]*" metric_name="Network*" \
         | stats sum(Sum) as network by metric_dimensions, metric_name | stats sum(network) as network_traffic by metric_dimensions \
         | `aws-cloudwatch-dimension-rex("InstanceId", "name")` | table network_traffic, name | outputlookup topology_network_traffic_metrics

[CloudWatch: Topology Volume IO Metric Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 25 * * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
search = `aws-cloudwatch-ebs("*", "*")` metric_dimensions="*VolumeId=[*]*" (metric_name="VolumeReadOps" OR metric_name="VolumeWriteOps") \
         | stats sum(Sum) as io_count by metric_dimensions, metric_name | stats sum(io_count) as volume_io by metric_dimensions \
         | `aws-cloudwatch-dimension-rex("VolumeId", "name")` | table volume_io, name | outputlookup topology_volumeio_metrics

[CloudWatch: Topology Volume Traffic Metric Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 30 * * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
search = `aws-cloudwatch-ebs("*", "*")` metric_dimensions="*VolumeId=[*]*" metric_name="Volume*Bytes" \
         | stats sum(Sum) as network by metric_dimensions, metric_name | stats sum(network) as network_traffic by metric_dimensions \
         | `aws-cloudwatch-dimension-rex("VolumeId", "name")` | table network_traffic, name | outputlookup topology_volume_traffic_metrics

[Billing: Topology Billing Metric Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
description = Generate Billing overlay for Topology
cron_schedule = 15 1 * * *
dispatch.earliest_time = -mon@mon
dispatch.latest_time = @mon
enableSched = 0
search = `aws-billing-details(*)` ResourceId="i-*" OR ResourceId="vol-*" | stats sum(BlendedCost) as billing by ResourceId | rename ResourceId as name | table billing, name | outputlookup topology_billing_metrics

[Billing: Billing Reports S3Key Generator]
cron_schedule = 50 1 * * *
description = Generate the lookup that stores the S3KeyLastModified for the latest report each month.
dispatch.earliest_time = -1y
dispatch.latest_time = now
search = `aws-billing-sourcetype` (RecordType=AccountTotal OR RecordType=StatementTotal) | stats count by aws_account_id S3KeyLastModified source eventtype | eventstats max(S3KeyLastModified) as max_s3 by source | where S3KeyLastModified=max_s3 and (eventtype="aws_billing_monthly_report" or eventtype="aws_billing_detail_report") | table S3KeyLastModified source eventtype | outputlookup billing_report_s3key
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
enableSched = 0

[Amazon Inspector: Topology Amazon Inspector Recommendation Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 35 * * * *
description = Generate Amazon Inspector data
dispatch.earliest_time = -3mon@mon
dispatch.latest_time = now
enableSched = 0
search = `aws-inspector-findings` assetAttributes.agentId=* assetType=ec2-instance | rename assetAttributes.agentId as agent_id, serviceAttributes.rulesPackageArn as rule_arn | stats latest(severity) as severity, latest(title) as finding by rule_arn, agent_id | table agent_id, severity, finding | outputlookup topology_inspector_recommendations

[Config Rules: Topology Config Rules Generator]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 40 * * * *
dispatch.earliest_time = -3mon@mon
dispatch.latest_time = now
enableSched = 0
search = `aws-config-rule-sourcetype` source="*:configRule:complianceDetail" | rename EvaluationResultIdentifier.EvaluationResultQualifier.ResourceId as resource_id, EvaluationResultIdentifier.EvaluationResultQualifier.ConfigRuleName as rule_name | stats latest(ComplianceType) as compliance_type by resource_id, rule_name | table resource_id, rule_name, compliance_type | outputlookup topology_config_rules


##### Vpc Flow Logs

[VPC Flow Logs Summary Generator - Dest Port]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
enableSched = 0
realtime_schedule = 0
search = `aws-vpc-flow-sourcetype` bytes!="-" | fields bytes packets aws_account_id dest_port interface_id protocol vpcflow_action | lookup well_known_ports port as dest_port protocol OUTPUT port as port | eval port=if(dest_port<=1024,dest_port,port) | rename port as dest_port | fillnull value="Others" dest_port | stats sum(bytes) as bytes sum(packets) as packets by aws_account_id dest_port interface_id protocol vpcflow_action | eventstats sum(packets) as total_packets sum(bytes) as total_bytes by interface_id aws_account_id protocol vpcflow_action | sort 10000 -packets | collect `aws-vpc-flow-log-index` source="dest_port"

[VPC Flow Logs Summary Generator - Dest IP]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
cron_schedule = */15 * * * *
dispatch.earliest_time = -16m@m
dispatch.latest_time = -1m@m
enableSched = 0
realtime_schedule = 0
search = `aws-vpc-flow-sourcetype` bytes!="-" | fields bytes packets aws_account_id dest_ip interface_id protocol vpcflow_action | stats sum(bytes) as bytes sum(packets) as packets by aws_account_id dest_ip interface_id protocol vpcflow_action | sort 10000 -packets | collect `aws-vpc-flow-log-index` source="dest_ip"

[VPC Flow Logs Summary Generator - Src IP]
action.email.useNSSubject = 1
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = */30 * * * *
dispatch.earliest_time = -32m@m
dispatch.latest_time = -2m@m
enableSched = 0
realtime_schedule = 0
search = `aws-vpc-flow-sourcetype` bytes!="-" | fields bytes packets aws_account_id src_ip interface_id protocol vpcflow_action | stats sum(bytes) as bytes sum(packets) as packets by aws_account_id src_ip interface_id protocol vpcflow_action | sort 10000 -packets | iplocation src_ip | collect `aws-vpc-flow-log-index` source="src_ip"


###### Machine Learning

[Machine Learning: Recommendation]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
cron_schedule = 0 21 * * *
enableSched = 1
dispatch.earliest_time = 0
dispatch.latest_time = now
search = | recommend


###### Data Volume

[AWS: calculate data volume indexed]
cron_schedule = 20 0 * * *
description = Calculate the amount of data indexed in Splunk
enableSched = 1
dispatch.earliest_time = -1d@d
dispatch.latest_time = @d
search = | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server="*" group="per_sourcetype_thruput" \
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 \
         | filterawssourcetype
action.summary_index = 1
action.summary_index.report = aws_indexed_data_volume
alert.digest_mode = True
realtime_schedule = 0


###### AWS ELB

[ELB Alert: latency]
disabled = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 00 23 * * *
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-cloudwatch-elb("*", "*")` metric_name=Latency | eval latency=Average*1000 \
         | `aws-cloudwatch-dimension-rex("LoadBalancerName", "elb_name")` \
         | where max(latency) > 100 | stats max(latency) as max_latency by elb_name


###### RI

[RI Expiration Alert - RI Plans expired within one month]
disabled = 1
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 1 * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-description-resource(*, *, "ec2_reserved_instances")` \
| eval expiredTimestamp=strptime(start, "%Y-%m-%dT%H:%M:%S")+'duration' \
| eval expired=strftime(expiredTimestamp,"%Y-%m-%dT%H:%M:%S") \
| eval currentTimestamp=now() \
| eval left=round(('expiredTimestamp'-'currentTimestamp')/60/60/24,0) \
| search left>0 AND left<31| eval left=left." Days" \
| rename left as "Expired in"


###### Cloudfront

[AWS Description - CloudFront Edges]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 50 * * * *
enableSched = 0
dispatch.earliest_time = -1d
dispatch.latest_time = now
search = `aws-description-resource("", "", "cloudfront_distributions")` | dedup id | table id, domain_name, account_id | outputlookup cloudfront_edges


###### S3 Bucket

[AWS Description - S3 Buckets]
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 55 * * * *
enableSched = 0
dispatch.earliest_time = -1d
dispatch.latest_time = now
search = `aws-description("*", "*", "s3_buckets", "Name")`  | rename Name as bucket_name, LocationConstraint as region | table bucket_name, account_id, region | outputlookup s3_buckets


###### Insights

[Insights: ELB]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index.insights = elb
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 25 1 * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
realtime_schedule = 0
enableSched = 0
search = `aws-unused-elb(("*"), ("*"))` | append [search earliest=-1d `aws-not-autoscaling-elb(("*"), ("*"))`] | append [search earliest=-1d `aws-not-enough-request-elb(("*"), ("*"))`] | append [search earliest=-1d `aws-not-cross-zone-elb(("*"), ("*"))`] | append [search earliest=-1d `aws-insecure-listener-elb(("*"), ("*"))`] | stats count by account_id region

[Insights: EIP]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index.insights = eip
alert.suppress = 0
alert.track = 0
cron_schedule = 30 1 * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
realtime_schedule = 0
search = `aws-unused-eip("*", "*")` | search insight="*" | stats count by account_id region

[Insights: EBS]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index.insights = ebs
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 35 1 * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
enableSched = 0
realtime_schedule = 0
search = earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ec2_volumes")` \
                         | where status!="in-use"\
                         | eval abnormaltype="Unused", Severity=1| append[search earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ec2_volumes")` \
                         | where type="io1"\
                         | where status="in-use"\
                         | rename attach_data.instance_id as instanceId\
                         | join instanceId type="inner" [search earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ec2_instances")`\
                         | where ebs_optimized="false" | rename id as instanceId ]\
                         | eval abnormaltype="Non-Optimized", Severity=1]| append[search earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ec2_volumes")` \
                             | join id type="outer" [search earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ebs_snapshots")` \
                             | rename volume_id as id, id as snapshotId] \
                             | eval snapTime=strptime(start_time, "%Y-%m-%dT%T") \
                             | eval diff=round((now()-snapTime)/86400,0) \
                             | where NOT (diff>0 AND diff<30)\
                             | eval abnormaltype="No Recent Snapshot", Severity=2]| append[search earliest=-7d@h `aws-cloudwatch-ebs("*", "*")` (metric_name="VolumeWriteOps" OR metric_name="VolumeReadOps")\
                         | eval Average = Average / period\
                         | stats avg(Average) as iops by metric_dimensions \
                         | eval iops = round(iops*2, 2)\
                         | sort +iops\
                         | `aws-cloudwatch-dimension-rex("VolumeId", "id")` \
                         | join type=inner id [search earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ec2_volumes")` \
                         | rename iops as piops]\
                         | where piops != "null"\
                         | where type="io1"\
                         | where iops/piops < 0.1\
                         | eval abnormaltype="Small IOPS", Severity=3]| append[search earliest=-7d@h `aws-cloudwatch-ebs("*", "*")` (metric_name="VolumeWriteOps" OR metric_name="VolumeReadOps")\
                         | eval Average = Average / period\
                         | stats avg(Average) as iops by metric_dimensions \
                         | eval iops = round(iops*2, 2)\
                         | sort -iops\
                         | `aws-cloudwatch-dimension-rex("VolumeId", "id")` \
                         | join type=inner id [search earliest=-1d `aws-description-resource((aws_account_id="*"),  (region="**") , "ec2_volumes")` \
                         | rename iops as piops]\
                         | where piops != "null"\
                         | where iops/piops > 0.9\
                         | eval abnormaltype="Large IOPS", Severity=3] | stats count by account_id region

[Insights: SG]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index.insights = sg
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 40 1 * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
realtime_schedule = 0
enableSched = 0
search = `aws-specific-ports-unrestricted-sg(("*"), ("*"))` | append [search earliest=-1d `aws-unrestricted-access-sg(("*"), ("*"))`] | append [search earliest=-1d `aws-unused-sg(("*"), ("*"))`] | append [search earliest=-1d `aws-redundant-sg(("*"), ("*"))`] | append [search earliest=-1d `aws-large-number-rules-sg(("*"), ("*"))`] | stats count by account_id region

[Insights: IAM]
action.email.useNSSubject = 1
action.summary_index = 1
action.summary_index.insights = iam
auto_summarize.dispatch.earliest_time = -1d@h
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
cron_schedule = 45 1 * * *
dispatch.earliest_time = -1d
dispatch.latest_time = now
realtime_schedule = 0
enableSched = 0
search = `aws-password-policy-iam(("*"))` | append [search earliest=-1d `aws-key-rotation-iam(("*"))`] | append [search earliest=-1d `aws-long-unused-iam(("*"))`] | stats count by account_id

[Personal Health Alert: Problematic Issues]
disabled = 1
alert.digest_mode = True
alert.severity = 4
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 55 * * * *
dispatch.earliest_time = -1h
dispatch.latest_time = now
enableSched = 1
quantity = 0
relation = greater than
search = `aws-sqs-sourcetype` AND BodyJson.source="aws.health" AND BodyJson.detail.eventTypeCategory="issue" AND (NOT BodyJson.detail.endTime=*)


###### Addon Sync

[Addon Synchronization]
search = | syncaddon
disabled = 0
enableSched = 0
dispatch.earliest_time = 0
dispatch.latest_time = now
cron_schedule = 0 * * * *


###### Anomaly Detection

[default]
# Set property defaults for viz
display.visualizations.custom.splunk_app_aws.anomaly_detection_viz.strictness = l
display.visualizations.custom.splunk_app_aws.anomaly_detection_viz.mask = false
display.visualizations.custom.splunk_app_aws.anomaly_detection_viz.type = line
display.visualizations.custom.splunk_app_aws.anomaly_detection_viz.x_title = Time
display.visualizations.custom.splunk_app_aws.anomaly_detection_viz.y_title = Count
display.visualizations.custom.splunk_app_aws.anomaly_detection_viz.stack_mode = no

[Anomaly Detection: Jobs Service]
cron_schedule = 5 * * * *
enableSched = 0
dispatch.max_time = 198000
search = | anomalyjob

[Anomaly Detection: Schedule Time Checker]
cron_schedule = 0 * * * *
enableSched = 0
dispatch.earliest_time = -1h@h
dispatch.latest_time = @h
search = index=_audit action="search" search=* | regex search="job_id=\"\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\""  | eval is_alert=if(savedsearch_name="", 0, 1) , earliest_time = strptime(apiStartTime,"'%a %b %d %T %Y'"), latest_time=strptime(apiEndTime,"'%a %b %d %T %Y'"), day=strftime(_time, "%Y-%m-%d")  | table _time, job_id, is_alert, earliest_time,latest_time, day | append [ | inputlookup anomaly_schedule_checker ] | where isnotnull(earliest_time) AND isnotnull(latest_time) | dedup job_id, is_alert | outputlookup anomaly_schedule_checker

######### Billing CUR

[Billing CUR: Topology Billing Metric Generator]
alert.suppress = 0
alert.track = 0
cron_schedule = 30 2 * * *
description = Generate Billing overlay for Topology
dispatch.earliest_time = -mon@mon
dispatch.latest_time = @mon
enableSched = 0
search = `aws-billing-details-cur(*)` InvoiceId=* ResourceId="i-*" OR ResourceId="vol-*" \
| rex field=source "(?<assemblyId>(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1})" \
| search \
    [| inputlookup billing_report_assemblyid_cur | eval timestr1 = strftime(relative_time(now(),"-mon"), "%Y%m") + "01-" | where timestr = timestr1 |  table  assemblyId | format] \
| stats sum(BlendedCost) as billing by ResourceId \
| rename ResourceId as name \
| table billing, name \
| outputlookup topology_billing_metrics_cur

[Billing CUR: Billing Reports AssemblyId Generator]
cron_schedule = 20 2 * * *
description = Generate the lookup that stores the AssemblyId for the latest CUR report for each month.
dispatch.earliest_time = -1y
dispatch.latest_time = now
search = `aws-billing-sourcetype-cur-digest` \
| stats latest(assemblyId) as assemblyId, latest(lastModified) as lastModifiedDate by source \
| rex field=source ".*/(?<timestr>\\d{8}-)\\d{8}.*" \
| outputlookup billing_report_assemblyid_cur
alert.digest_mode = True
alert.suppress = 0
alert.track = 0
enableSched = 0

######### Sync KVStore
[KVStore Synchronization]
search = | synckvstore
disabled = 1
enableSched = 0
dispatch.earliest_time = 0
dispatch.latest_time = now

